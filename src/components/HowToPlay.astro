---
import { Icon } from 'astro-icon/components';
import type { CollectionEntry } from 'astro:content';

interface Props {
  data: CollectionEntry<'sections'>;
}

const { data } = Astro.props;
const { slides } = data.data;
---

<section class="py-20 bg-white dark:bg-dark overflow-hidden">
  <div class="container">
    <div class="relative">
      <!-- Slider Container -->
      <div class="relative overflow-hidden">
        <div class="flex transition-transform duration-500 ease-out" id="slider">
          {slides.map((slide, index) => (
            <div class="w-full flex-shrink-0">
              <div class="max-w-4xl mx-auto px-4">
                <h2 class="text-4xl font-bold text-primary mb-4 text-center">
                  {slide.title}
                </h2>
                <p class="text-lg text-body-color dark:text-dark-6 mb-8 text-center max-w-2xl mx-auto">
                  {slide.description}
                </p>
                <div class="relative rounded-xl overflow-hidden mb-8">
                  <img 
                    src={slide.image} 
                    alt={`How to play - ${slide.title}`} 
                    class="w-full"
                  />
                </div>
                <div class="grid md:grid-cols-2 gap-6">
                  {slide.controls.map((control) => (
                    <div class="flex items-center gap-4 p-4 rounded-lg bg-gray-50 dark:bg-dark-2">
                      <div class="w-12 h-12 flex items-center justify-center rounded-full bg-primary/10 text-primary">
                        <Icon name={`ph:${control.icon}`} class="w-6 h-6" />
                      </div>
                      <p class="text-dark dark:text-dark-6">{control.text}</p>
                    </div>
                  ))}
                </div>
              </div>
            </div>
          ))}
        </div>

        <!-- Navigation Arrows -->
        <button 
          class="absolute left-4 top-1/2 -translate-y-1/2 w-10 h-10 flex items-center justify-center rounded-full bg-white/80 dark:bg-dark-2/80 text-dark dark:text-white hover:bg-primary hover:text-white transition-colors"
          id="prevBtn"
        >
          <Icon name="ph:caret-left-bold" class="w-6 h-6" />
        </button>
        <button 
          class="absolute right-4 top-1/2 -translate-y-1/2 w-10 h-10 flex items-center justify-center rounded-full bg-white/80 dark:bg-dark-2/80 text-dark dark:text-white hover:bg-primary hover:text-white transition-colors"
          id="nextBtn"
        >
          <Icon name="ph:caret-right-bold" class="w-6 h-6" />
        </button>
      </div>

      <!-- Dots -->
      <div class="flex justify-center gap-2 mt-6">
        {slides.map((_, index) => (
          <button
            class="w-3 h-3 rounded-full bg-gray-300 dark:bg-dark-3 transition-colors dot-btn"
            data-index={index}
          >
            <span class="sr-only">Slide {index + 1}</span>
          </button>
        ))}
      </div>
    </div>
  </div>
</section>

<script>
  const slider = document.getElementById('slider');
  const prevBtn = document.getElementById('prevBtn');
  const nextBtn = document.getElementById('nextBtn');
  const dots = document.querySelectorAll('.dot-btn');
  let currentSlide = 0;
  const slideCount = dots.length;

  function updateSlider() {
    if (!slider) return;
    slider.style.transform = `translateX(-${currentSlide * 100}%)`;
    
    // Update dots
    dots.forEach((dot, index) => {
      dot.classList.toggle('bg-primary', index === currentSlide);
      dot.classList.toggle('bg-gray-300 dark:bg-dark-3', index !== currentSlide);
    });

    // Update button states
    if (prevBtn) prevBtn.style.opacity = currentSlide === 0 ? '0.5' : '1';
    if (nextBtn) nextBtn.style.opacity = currentSlide === slideCount - 1 ? '0.5' : '1';
  }

  // Event listeners
  prevBtn?.addEventListener('click', () => {
    if (currentSlide > 0) {
      currentSlide--;
      updateSlider();
    }
  });

  nextBtn?.addEventListener('click', () => {
    if (currentSlide < slideCount - 1) {
      currentSlide++;
      updateSlider();
    }
  });

  dots.forEach((dot, index) => {
    dot.addEventListener('click', () => {
      currentSlide = index;
      updateSlider();
    });
  });

  // Initial setup
  updateSlider();
</script>